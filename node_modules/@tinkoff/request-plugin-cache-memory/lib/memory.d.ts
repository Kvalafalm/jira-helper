import type LRUCache from '@tinkoff/lru-cache-nano';
import type { Options } from '@tinkoff/lru-cache-nano';
import type { Plugin, Response } from '@tinkoff/request-core';
declare module '@tinkoff/request-core/lib/types.h' {
    interface Request {
        memoryCache?: boolean;
        memoryCacheForce?: boolean;
        memoryCacheTtl?: number;
    }
}
export interface MemoryPluginOptions {
    lruOptions?: Options<string, Response>;
    shouldExecute?: boolean;
    allowStale?: boolean;
    staleTtl?: number;
    staleBackgroundRequestTimeout?: number;
    memoryConstructor?: (options: Options<string, Response>) => LRUCache<string, Response>;
    getCacheKey?: (arg: any) => string;
}
declare const _default: ({ lruOptions, shouldExecute, allowStale, staleTtl, staleBackgroundRequestTimeout, memoryConstructor, getCacheKey, }?: MemoryPluginOptions) => Plugin;
/**
 * Caches requests response into memory.
 * Uses library `@tinkoff/lru-cache-nano` as memory storage.
 *
 * requestParams:
 *      memoryCache {boolean} - disable this plugin at all
 *      memoryCacheForce {boolean} - plugin will only be executed on complete phase
 *      memoryCacheTtl {number} - ttl of cache of the current request
 *      memoryCacheAllowStale {boolean} - is allowed to use outdated value from cache
 *          (if true outdated value will be returned and request to update it will be run in background)
 *
 * metaInfo:
 *      memoryCache {boolean} - is current request was returned from this cache
 *      memoryCacheOutdated {boolean} - is value in cache is outdated (only for plugin with allowStale = true)
 *
 * @param {object} [lruOptions = {max: 1000, ttl: 300000}] - options passed to @tinkoff/lru-cache-nano library
 * @param {boolean} [shouldExecute = true] is plugin activated by default
 * @param {boolean} [allowStale = false] is allowed to use outdated value from cache
 *      (if true outdated value will be returned and request to update it will be run in background)
 * @param {number} [staleTtl = lruOptions.ttl] time in ms while outdated value is preserved in cache while
 *       executing background update
 * @param {number} [staleBackgroundRequestTimeout] time in ms for background request timeout for the stale response
 * @param {function} memoryConstructor cache factory
 * @param {function} getCacheKey function used for generate cache key
 */
export default _default;
