'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var prop = require('@tinkoff/utils/object/prop');
var requestCore = require('@tinkoff/request-core');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var prop__default = /*#__PURE__*/_interopDefaultLegacy(prop);

const CACHE = 'cache';

var metaTypes = {
    __proto__: null,
    CACHE: CACHE
};

var shouldCacheExecute = (name, dflt) => (context) => {
    var _a, _b, _c, _d;
    const request = context.getRequest();
    const forced = (_a = prop__default["default"]('cacheForce', request)) !== null && _a !== void 0 ? _a : false;
    const forcedSpecific = (_b = prop__default["default"](`${name}CacheForce`, request)) !== null && _b !== void 0 ? _b : forced;
    const enabled = (_c = prop__default["default"]('cache', request)) !== null && _c !== void 0 ? _c : dflt;
    const enabledSpecific = (_d = prop__default["default"](`${name}Cache`, request)) !== null && _d !== void 0 ? _d : enabled;
    if (context.getStatus() === requestCore.Status.INIT) {
        context.updateExternalMeta(CACHE, {
            forced,
            enabled,
            [`${name}Enabled`]: enabledSpecific,
            [`${name}Force`]: forcedSpecific,
        });
    }
    if (forcedSpecific) {
        return context.getStatus() === requestCore.Status.COMPLETE;
    }
    return enabledSpecific;
};

var defaultCacheKey = ({ httpMethod = 'GET', url, payload, query, rawQueryString = '', additionalCacheKey = '' }) => httpMethod.toLowerCase() +
    url +
    JSON.stringify(payload || '') +
    JSON.stringify(query || '') +
    rawQueryString +
    JSON.stringify(additionalCacheKey);

var getCacheKey = (context, cacheKey = defaultCacheKey) => {
    let key = prop__default["default"]('key', context.getInternalMeta(CACHE));
    if (!key) {
        key = cacheKey(context.getRequest());
        context.updateInternalMeta(CACHE, {
            key,
        });
    }
    return key;
};

exports.cacheKey = defaultCacheKey;
exports.getCacheKey = getCacheKey;
exports.metaTypes = metaTypes;
exports.shouldCacheExecute = shouldCacheExecute;
