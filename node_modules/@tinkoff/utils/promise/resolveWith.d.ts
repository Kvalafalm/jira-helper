import { Func } from '../typings/types';
interface ResolveWith {
    <T1, T2, R>(func: (a: T1, b: T2, ...args: any[]) => R, a: T1, b: T2, ...args: any[]): Promise<R>;
    <T, R>(func: (a: T) => R, a: T): Promise<R>;
    <T1, T2, R>(func: (a: T1, b: T2, ...payload: any[]) => R): (a: T1, b: T2, ...payload: any[]) => Promise<R>;
    <T, R>(func: (a: T) => R): (a: T) => Promise<R>;
    <R>(func: Func<R>): (...payload: any[]) => Promise<R>;
}
declare const _default: ResolveWith;
/**
 * Returns a promise that resolves with a value returned
 * by the supplied function when passed the supplied payload
 *
 * @param {Function} func
 * @param {*[]} payload
 * @returns {Promise}
 * @example
 *      rejectWith(toLowerCase, 'OK').then( res => console.info(res) );// => 'ok'
 */
export default _default;
