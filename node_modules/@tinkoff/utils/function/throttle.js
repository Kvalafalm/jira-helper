"use strict";

var curryN = require('./curryN');

/**
 * Creates a throttled function that only invokes `fn` at most once per
 * every `wait` milliseconds. `fn` is called in start of `wait` delay
 *
 * @param {number} wait The number of milliseconds to throttle invocations to.
 * @param {Function} fn The function to throttle.
 */
module.exports = curryN(2, function (wait, fn) {
  var lastCalled;
  var timeout;
  return function () {
    var _this = this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var now = Date.now();
    var diff = lastCalled + wait - now;

    if (lastCalled && diff > 0) {
      clearTimeout(timeout);
      timeout = setTimeout(function () {
        lastCalled = now;
        fn.apply(_this, args);
      }, diff);
    } else {
      lastCalled = now;
      fn.apply(this, args);
    }
  };
});