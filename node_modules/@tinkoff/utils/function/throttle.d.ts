import { Func } from '../typings/types';
export declare type ThrottleFunc<T extends Func> = (...args: Parameters<T>) => void;
export interface Throttle {
    <F extends Func>(wait: number, fn: F): ThrottleFunc<F>;
    (wait: number): <F extends Func>(fn: F) => ThrottleFunc<F>;
}
declare const _default: Throttle;
/**
 * Creates a throttled function that only invokes `fn` at most once per
 * every `wait` milliseconds. `fn` is called in start of `wait` delay
 *
 * @param {number} wait The number of milliseconds to throttle invocations to.
 * @param {Function} fn The function to throttle.
 */
export default _default;
