"use strict";

var curryN = require('./curryN');

/**
 * Creates a throttled function that only invokes `fn` at most once per
 * every `wait` milliseconds. `fn` is called in the end of `wait` delay
 *
 * @param {number} wait The number of milliseconds to throttle invocations to.
 * @param {Function} fn The function to throttle.
 */
module.exports = curryN(2, function (wait, fn) {
  var lastCalled;
  var lastArgs;
  var lastThis;
  var timeout;
  return function () {
    var now = Date.now();
    var diff = lastCalled + wait - now;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (diff < 0 && timeout) {
      clearTimeout(timeout);
      timeout = null;
      fn.apply(this, args);
    } else if (!timeout) {
      timeout = setTimeout(function () {
        fn.apply(lastThis, lastArgs);
        timeout = null;
      }, wait);
    }

    lastCalled = now;
    lastArgs = args;
    lastThis = this;
  };
});