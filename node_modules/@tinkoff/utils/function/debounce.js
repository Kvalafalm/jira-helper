"use strict";

var curryN = require('./curryN');

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. Delayed function invocation might be cancelled by calling cancel method.
 *
 * @param {number} wait The number of milliseconds to delay.
 * @param {Function} fn The function to debounce.
 * @returns {Function} Returns the new debounced function.
 */
module.exports = curryN(2, function (wait, fn) {
  var timeout;

  function f() {
    var _this = this;

    var args = arguments;
    clearTimeout(timeout);
    timeout = setTimeout(function () {
      return fn.apply(_this, args);
    }, // eslint-disable-line prefer-rest-params
    wait);
  }

  f.cancel = function () {
    return clearTimeout(timeout);
  };

  return f;
});