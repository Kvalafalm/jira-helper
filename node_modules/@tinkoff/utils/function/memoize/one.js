"use strict";

var equal = require('../../is/equal');

/**
 * Memoize function with multiply arguments of any type.
 * Use it when you need to cache lookup only for last result (like reselect).
 *
 * @param {Function} fn
 * @param {Function} isEqual - checks equality for two values
 * @returns {Function}
 * @example
 *     const addFlag = obj => ({...obj, flag: true });
 *     const memoize = memoizeOnce(addFlag));
 *     memoize(1); // from addFlag call
 *     memoize(1); // from cache
 *     memoize(1,2) // from addFlag call,
 *     memoize(1) // from addFlag call, cache was flashed on previous step
 */
module.exports = function (fn, isEqual) {
  if (isEqual === void 0) {
    isEqual = equal;
  }

  var lastArgs = [];
  var lastResult;
  var alreadyCalled = false;

  var isNewArgEqualToLast = function isNewArgEqualToLast(newArg, index) {
    return isEqual(newArg, lastArgs[index]);
  };

  return function () {
    for (var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++) {
      newArgs[_key] = arguments[_key];
    }

    if (alreadyCalled && newArgs.length === lastArgs.length && newArgs.every(isNewArgEqualToLast)) {
      return lastResult;
    }

    lastResult = fn.apply(void 0, newArgs);
    alreadyCalled = true;
    lastArgs = newArgs;
    return lastResult;
  };
};