"use strict";

/**
 * Performs right-to-left function composition. The rightmost function may have
 * any arity; the remaining functions must be unary.
 *
 * **Note:** The result of compose is not automatically curried.
 *
 * @param {...Function} fns
 * @return {Function}
 * @example
 *
 *      var f = compose(x => x + 1, x => -x, Math.pow);
 *
 *      f(3, 4); // -(3^4) + 1
 */
module.exports = function () {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return function () {
    var n = fns.length - 1;
    var result = fns[n].apply(fns, arguments);

    for (var i = n - 1; i >= 0; i--) {
      result = fns[i](result);
    }

    return result;
  };
};