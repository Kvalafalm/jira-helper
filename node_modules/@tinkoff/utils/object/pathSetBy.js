"use strict";

var curryN = require('../function/curryN');

var isObject = require('../is/object');

var isNumber = require('../is/number');

var has = require('./has');

var assign = require('../assign');

/**
 * Returns the result of "setting" the portion of the given data structure
 * focused by the given paths to the result of `fn` call.
 *
 * **Note:** If property in the object is equal to value by reference then function
 * just returns object without changes
 *
 * @param {[String]} paths
 * @param {Function} fn
 * @param {Object} obj
 * @return {Object}
 * @example
 *
 *      pathSetBy(['a', 'b'], x => x+1, {a: { b:1 }}) // => { a: { b: 2 } }
 */
module.exports = curryN(3, function (paths, fn, obj) {
  if (paths === void 0) {
    paths = [];
  }

  if (obj === void 0) {
    obj = {};
  }

  var n = paths.length - 1;
  var result = assign(obj);
  var key = paths[n];
  var val = result;
  var v;

  for (var i = 0; i < n; i++) {
    v = val[paths[i]];

    if (isObject(v)) {
      v = assign(v);
    } else {
      v = isNumber(paths[i + 1]) ? [] : {};
    }

    val[paths[i]] = v;
    val = v;
  }

  var res = fn(val[key], paths, obj);

  if (has(key, val) && val[key] === res) {
    return obj;
  }

  val[key] = res;
  return result;
});