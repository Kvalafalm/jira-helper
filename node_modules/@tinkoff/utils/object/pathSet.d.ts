import { Paths, Prop, ReplaceType } from '../typings/types';
interface PathSet {
    <K extends Prop, V, O>(path: [K], value: V, obj: O): ReplaceType<O, K, V>;
    <K extends Prop, V>(path: [K], value: V): <O>(obj: O) => ReplaceType<O, K, V>;
    <K extends Prop>(path: [K]): {
        <V, O>(value: V, obj: O): ReplaceType<O, K, V>;
        <V>(value: V): <O>(obj: O) => ReplaceType<O, K, V>;
    };
    <O>(path: Paths, value: any, obj: O): O;
    (path: Paths, value: any): <O>(obj: O) => O;
    (path: Paths): {
        <O>(value: any, obj: O): O;
        (value: any): <O>(obj: O) => O;
    };
}
declare const _default: PathSet;
/**
 * Returns the result of "setting" the portion of the given data structure
 * focused by the given paths to the given value.
 *
 * **Note:** If property in the object is equal to value by reference then function
 * just returns object without changes
 *
 * @param {[String]} paths
 * @param {*} value
 * @param {Object} obj
 * @return {Object}
 * @example
 *
 *      pathSet(['a', 'b'], 3, {}) // => { a: { b: 3 } }
 */
export default _default;
