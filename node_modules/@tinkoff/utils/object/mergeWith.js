"use strict";

var curryN = require('../function/curryN');

var objectKeys = require('./keys');

var assign = require('../assign');

/**
 * Create a new object with the own properties of the first object merged with
 * the own properties of the others objects. If a key exists in several objects
 * provided `fn` will be called and should return resolve value
 *
 * @param {Function} fn function to call if prop conflict appear. Receives three argument, `valueLeft`, `valueRight`,
 * `key`, `leftObj`, `rightObj`.
 * @param {...Object} sources
 * @return {Object}
 * @example
 *
 * mergeWith((x, y) => x + y, { 'name': 'fred', 'age': 10 }, { 'age': 40 }); //=> { 'name': 'fred', 'age': 50 }
 */
module.exports = curryN(3, function (fn) {
  var result = assign(arguments.length <= 1 ? undefined : arguments[1]);

  for (var i = 1; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i++) {
    var source = i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1];
    var keys = objectKeys(source);

    for (var j = 0; j < keys.length; j++) {
      var key = keys[j];

      if (Object.prototype.hasOwnProperty.call(result, key)) {
        result[key] = fn(result[key], source[key], key, result, source);
      } else {
        result[key] = source[key];
      }
    }
  }

  return result;
});