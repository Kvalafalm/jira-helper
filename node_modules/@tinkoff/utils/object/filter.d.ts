import { ObjPred } from '../typings/types';
interface FilterObj {
    <O extends Record<any, any>>(fn: ObjPred<keyof O, O[keyof O]>, obj: O): Partial<O>;
    <K extends string, V>(fn: ObjPred<K, V>): <O extends Record<K, V>>(obj: O) => Partial<O>;
}
declare const _default: FilterObj;
/**
 * Takes a predicate and a object, and returns a new object
 * containing only members which satisfy the
 * given predicate.
 *
 * @param {Function} fn
 * @param {Object} obj
 * @return {Object}
 * @example
 *
 *      var isEven = n => n % 2 === 0;
 *
 *      filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */
export default _default;
