"use strict";

var curryN = require('../function/curryN');

var objectKeys = require('./keys');

/**
 * Creates an object composed of keys generated from the results of running
 * each element of object thru `fn`. The corresponding
 * value of each key is an array of elements responsible for generating the key.
 *
 * @param {Function} fn The function to transform value to group key. Receives three argument, `value`, `key`, `obj`.
 * @param {Object} obj The obj to iterate over.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * groupBy(x => x, { a: 1, b: 1, c: 3});// => { '1': [1, 1], '3': [3] }
 */
module.exports = curryN(2, function (fn, obj) {
  if (obj === void 0) {
    obj = {};
  }

  var result = {};
  var keys = objectKeys(obj);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var groupValue = fn(obj[key], key, obj);

    if (!result[groupValue]) {
      result[groupValue] = [];
    }

    result[groupValue].push(obj[key]);
  }

  return result;
});