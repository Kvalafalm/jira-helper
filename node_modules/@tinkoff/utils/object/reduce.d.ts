export declare type ReduceFunc<R, O extends Record<any, any>> = (acc: R, value: O[keyof O], key: keyof O & string, obj: O) => R;
interface ReduceObj {
    <R, O extends Record<any, any>>(fn: ReduceFunc<R, O>, acc: R, obj: O): R;
    <R>(fn: ReduceFunc<R, any>, acc: R): (obj: any) => R;
    (fn: ReduceFunc<any, any>): {
        <R>(acc: R, obj: any): R;
        <R>(acc: R): (obj: any) => R;
    };
}
declare const _default: ReduceObj;
/**
 * Returns a single item by iterating through the obj, successively calling
 * the iterator function and passing it an accumulator value, current
 * value and current key from the obj, and then passing the result to the next call.
 *
 * @param {Function} fn The iterator function. Receives three argument, `accumulator`, `value`, `key`.
 * @param {*} acc The accumulator value.
 * @param {Object} obj The object to iterate over.
 * @return {*} The final, accumulated value.
 * @example
 *
 *      var obj = { a: 1, b: 2, c: 3};
 *      var plus = (a, b) => a + b;
 *
 *      reduce(plus, 10, obj); //=> 16
 */
export default _default;
