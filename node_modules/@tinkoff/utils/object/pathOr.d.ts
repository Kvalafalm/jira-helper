import { CurriedFunction2, Paths, Prop } from '../typings/types';
interface PathOr {
    <K extends Prop, V, O extends Record<K, any>>(path: [K], value: V, obj: O): O[K];
    <K extends Prop, V>(path: [K], value: V, obj: any): V;
    <K extends Prop, V>(path: [K], value: V): {
        <O extends Record<K, any>>(obj: O): O[K];
        (obj: any): V;
    };
    <K extends Prop>(path: [K]): {
        <V, O extends Record<K, any>>(value: V, obj: O): O[K];
        <V>(value: V, obj: any): V;
        <V>(value: V): {
            <O extends Record<K, any>>(obj: O): O[K];
            (obj: any): V;
        };
    };
    (path: Paths, value: any, obj: any): any;
    (path: Paths, value: any): (obj: any) => any;
    (path: Paths): CurriedFunction2<any, any, any>;
}
declare const _default: PathOr;
/**
 * If the given, non-null object has a value at the given path, returns the
 * value at that path. Otherwise returns the provided default value.
 *
 * @param {[String]} paths The path to use.
 * @param {*} value The default value.
 * @param {Object} obj The object to retrieve the nested property from.
 * @return {*} The data at `path` of the supplied object or the default value.
 * @example
 *
 *      pathOr(['a', 'b'],'N/A', {a: {b: 2}}); //=> 2
 *      pathOr(['a', 'b'], 'N/A', {c: {b: 2}}); //=> "N/A"
 */
export default _default;
