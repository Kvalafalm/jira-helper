"use strict";

var curryN = require('../function/curryN');

/**
 * Sorts the array according to the supplied function and keeping the order of elements.
 *
 * @param {Function} fn
 * @param {Array} arr The array to sort.
 * @return {Array} A new array sorted by the keys generated by `fn`.
 * @example
 *
 *      const people = [
 *          { name: 'Ann', age: 20 },
 *          { name: 'Gary', age: 20 },
 *          { name: 'John', age: 17 },
 *          { name: 'Sam', age: 21 },
 *          { name: 'Bob', age: 17 }
 *      ];
 *      stableSortBy(path(['age']), people) => [
 *          { name: 'John', age: 17 },
 *          { name: 'Bob', age: 17 },
 *          { name: 'Ann', age: 20 },
 *          { name: 'Gary', age: 20 },
 *          { name: 'Sam', age: 21 }
 *      ]
 */
module.exports = curryN(2, function (fn, arr) {
  if (arr === void 0) {
    arr = [];
  }

  var len = arr.length;
  var indexes = new Array(len);

  for (var i = 0; i < len; i++) {
    indexes[i] = i;
  }

  indexes.sort(function (a, b) {
    var valueA = arr[a];
    var valueB = arr[b];
    var x = fn(valueA);
    var y = fn(valueB);

    if (x < y) {
      return -1;
    } else if (x > y) {
      return 1;
    }

    return a - b;
  });
  var result = new Array(len);

  for (var _i = 0; _i < len; _i++) {
    result[_i] = arr[indexes[_i]];
  }

  return result;
});