import { OrdFunc, Ord } from '../typings/types';
interface StableSortBy {
    <T, R extends Ord>(fn: OrdFunc<T, R>, list: ArrayLike<T>): T[];
    <T, R extends Ord>(fn: OrdFunc<T, R>): (list: ArrayLike<T>) => T[];
}
declare const _default: StableSortBy;
/**
 * Sorts the array according to the supplied function and keeping the order of elements.
 *
 * @param {Function} fn
 * @param {Array} arr The array to sort.
 * @return {Array} A new array sorted by the keys generated by `fn`.
 * @example
 *
 *      const people = [
 *          { name: 'Ann', age: 20 },
 *          { name: 'Gary', age: 20 },
 *          { name: 'John', age: 17 },
 *          { name: 'Sam', age: 21 },
 *          { name: 'Bob', age: 17 }
 *      ];
 *      stableSortBy(path(['age']), people) => [
 *          { name: 'John', age: 17 },
 *          { name: 'Bob', age: 17 },
 *          { name: 'Ann', age: 20 },
 *          { name: 'Gary', age: 20 },
 *          { name: 'Sam', age: 21 }
 *      ]
 */
export default _default;
