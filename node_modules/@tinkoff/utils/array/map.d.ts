declare type MapFunc<T, R> = (item: T, i: number, arr: ArrayLike<T>) => R;
interface Map {
    <T, R>(fn: MapFunc<T, R>, arr: ArrayLike<T>): R[];
    <T, R>(fn: MapFunc<T, R>): (arr: ArrayLike<T>) => R[];
}
declare const _default: Map;
/**
 * Creates an array of values by running each element in list through fn. The fn is invoked with three arguments:
 * (value, index, arr).
 *
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {Array} arr The list to be iterated over.
 * @return {Array} The new list.
 * @example
 *
 *      var double = x => x * 2;
 *
 *      map(double, [1, 2, 3]); //=> [2, 4, 6]
 */
export default _default;
