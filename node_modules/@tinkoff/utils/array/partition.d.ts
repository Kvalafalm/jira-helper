import { ArrPred } from '../typings/types';
interface Partition {
    <T>(fn: ArrPred<T>, list: ArrayLike<T>): [T[], T[]];
    <T>(fn: ArrPred<T>): (list: ArrayLike<T>) => [T[], T[]];
}
declare const _default: Partition;
/**
 * Takes a predicate and a array and returns the
 * pair of arrays of the same type of elements which do and do not
 * satisfy, the predicate, respectively.
 *
 * @param {Function} fn A predicate to determine which side the element belongs to.
 * @param {Array} arr the array to partition.
 * @return {Array} An array, containing first the subset of elements that satisfy the
 *         predicate, and second the subset of elements that do not satisfy.
 * @example
 *
 *      partition(includes('s'), ['sss', 'ttt', 'foo', 'bars']);
 *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]
 */
export default _default;
