import { ArrPred } from '../typings/types';
interface GroupBy {
    <T>(fns: ArrPred<T>[], list: ArrayLike<T>): T[][];
    <T>(fns: ArrPred<T>[]): (list: ArrayLike<T>) => T[][];
}
declare const _default: GroupBy;
/**
 * Creates an array of arrays generated from the results of running
 * each element of list thru each `fn`. The corresponding
 * value of each index is an array of elements satisfies to function with that index, and
 * the last array is elements with no satisfied function
 *
 * @param {Array<Function>} fns The functions to check values in a list.
 * @param {Array} list The list to iterate over.
 * @returns {Array} Returns the composed array.
 * @example
 *
 * groupBy([isPositive, isZero, isNegative], [0, -3, 2, 'str', 4, -1]);// => [[2,4], [0], [-3, -1], ['str']]
 */
export default _default;
