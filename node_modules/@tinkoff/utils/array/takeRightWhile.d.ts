import { ArrPred } from '../typings/types';
interface TakeRightWhile {
    (fn: ArrPred<string>, arr: string): string;
    <T>(fn: ArrPred<T>, arr: ArrayLike<T>): T[];
    <T>(fn: ArrPred<T>): {
        (arr: string): string;
        (arr: ArrayLike<T>): T[];
    };
}
declare const _default: TakeRightWhile;
/**
 * Returns a new array|string containing the last `n` elements of a given array|string, passing
 * each value to the supplied predicate function, and terminating when the
 * predicate function returns `false`. Excludes the element that caused the
 * predicate function to fail.
 *
 * @param {Function} fn The function called per iteration.
 * @param {Array|String} arr The collection to iterate over.
 * @return {Array|String} A new array or string.
 * @example
 *
 *      var isNotOne = x => x !== 1;
 *
 *      takeRightWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]
 */
export default _default;
