import { Ord, OrdFunc } from '../typings/types';
interface SortBy {
    <T, R extends Ord>(fn: OrdFunc<T, R>, list: ArrayLike<T>): T[];
    <T, R extends Ord>(fn: OrdFunc<T, R>): (list: ArrayLike<T>) => T[];
}
declare const _default: SortBy;
/**
 * Sorts the array according to the supplied function.
 *
 * @param {Function} fn
 * @param {Array} arr The array to sort.
 * @return {Array} A new array sorted by the keys generated by `fn`.
 * @example
 *
 *      var sortByFirstItem = sortBy(x => x[0]);
 *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];
 *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]
 */
export default _default;
