"use strict";

var curryN = require('../function/curryN');

var map = require('./map');

/**
 * Creates an array of arrays generated from the results of running
 * each element of list thru each `fn`. The corresponding
 * value of each index is an array of elements satisfies to function with that index, and
 * the last array is elements with no satisfied function
 *
 * @param {Array<Function>} fns The functions to check values in a list.
 * @param {Array} list The list to iterate over.
 * @returns {Array} Returns the composed array.
 * @example
 *
 * groupBy([isPositive, isZero, isNegative], [0, -3, 2, 'str', 4, -1]);// => [[2,4], [0], [-3, -1], ['str']]
 */
module.exports = curryN(2, function (fns, arr) {
  if (arr === void 0) {
    arr = [];
  }

  var n = fns.length;
  var result = map(function () {
    return [];
  }, Array(n));
  var rest = [];

  for (var arrI = 0; arrI < arr.length; arrI++) {
    var value = arr[arrI];
    var fnsI = void 0;

    for (fnsI = 0; fnsI < n; fnsI++) {
      if (fns[fnsI](value, arrI, arr)) {
        result[fnsI].push(value);
        break;
      }
    }

    if (fnsI === n) {
      rest.push(value);
    }
  }

  result.push(rest);
  return result;
});