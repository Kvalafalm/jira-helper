import eachObj from '@tinkoff/utils/object/each';
import isNil from '@tinkoff/utils/is/nil';
import isObject from '@tinkoff/utils/is/object';
import reduceArr from '@tinkoff/utils/array/reduce';

const serializeQuery = (obj, init = '') => {
    const searchParams = new URLSearchParams(init);
    const setParams = (params, keys = []) => {
        eachObj((v, k) => {
            if (isNil(v))
                return;
            const arr = keys.length ? [...keys, k] : [k];
            if (isObject(v)) {
                setParams(v, arr);
            }
            else {
                searchParams.set(reduceArr((acc, curr, i) => (i ? `${acc}[${curr}]` : curr), '', arr), v);
            }
        }, params);
    };
    setParams(obj);
    return searchParams.toString();
};
const addQuery = (url, query, querySerializer = serializeQuery) => {
    const [path, search] = url.split('?', 2);
    const serialized = querySerializer(query, search);
    if (!serialized) {
        return path;
    }
    return `${path}?${serialized}`;
};
const normalizeUrl = (url) => {
    if (typeof window === 'undefined' && !/^https?:\/\//.test(url)) {
        return `http://${url}`;
    }
    return url;
};

export { addQuery, normalizeUrl, serializeQuery };
