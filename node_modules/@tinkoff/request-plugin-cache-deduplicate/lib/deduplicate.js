'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var requestCacheUtils = require('@tinkoff/request-cache-utils');

/**
 * Deduplicate requests with equal cache keys before making a request
 *
 * requestParams:
 *      deduplicateCache {boolean} - disable this plugin at all
 *      deduplicateCacheForce {boolean} - plugin will only be executed on complete phase
 *
 * metaInfo:
 *      deduplicated {boolean} - is current request was deduplicated (is not set for the first request of equals requests)
 *
 * @param {boolean} [shouldExecute = true] is plugin activated by default
 * @param {function} getCacheKey function used for generate cache key
 */
var deduplicate = ({ shouldExecute = true, getCacheKey = undefined } = {}) => {
    const activeRequests = {};
    const traverseActiveRequests = (context) => {
        const state = context.getState();
        const deduplicationKey = requestCacheUtils.getCacheKey(context, getCacheKey);
        if (deduplicationKey && activeRequests[deduplicationKey]) {
            const arr = activeRequests[deduplicationKey];
            delete activeRequests[deduplicationKey];
            arr.forEach((next) => {
                next({
                    status: state.status,
                    response: state.response,
                    error: state.error,
                });
            });
        }
    };
    return {
        shouldExecute: requestCacheUtils.shouldCacheExecute('deduplicate', shouldExecute),
        init: (context, next) => {
            const deduplicationKey = requestCacheUtils.getCacheKey(context, getCacheKey);
            if (activeRequests[deduplicationKey]) {
                context.updateExternalMeta(requestCacheUtils.metaTypes.CACHE, {
                    deduplicated: true,
                });
                activeRequests[deduplicationKey].push(next);
                return;
            }
            activeRequests[deduplicationKey] = [];
            next();
        },
        complete: (context, next) => {
            traverseActiveRequests(context);
            next();
        },
        error: (context, next) => {
            traverseActiveRequests(context);
            next();
        },
    };
};

exports["default"] = deduplicate;
