import { Agent } from 'https';
import { Plugin } from '@tinkoff/request-core';
import { Query, QuerySerializer } from '@tinkoff/request-url-utils';
import { HttpMethods } from './constants';
declare module '@tinkoff/request-core/lib/types.h' {
    interface Request {
        httpMethod?: keyof typeof HttpMethods | typeof HttpMethods[keyof typeof HttpMethods] | 'get' | 'post' | 'put' | 'delete' | 'head' | 'patch';
        url?: string;
        query?: Query;
        queryNoCache?: Query;
        headers?: object;
        type?: string;
        payload?: any;
        attaches?: any[];
        timeout?: number;
        credentials?: RequestCredentials;
        /**
         * @deprecated use `credentials` instead
         */
        withCredentials?: boolean;
        abortPromise?: Promise<any>;
        signal?: AbortSignal;
    }
    interface RequestErrorCode {
        ERR_HTTP_REQUEST_TIMEOUT: 'ERR_HTTP_REQUEST_TIMEOUT';
        ERR_HTTP_ERROR: 'ERR_HTTP_ERROR';
        ABORT_ERR: 'ABORT_ERR';
    }
}
declare const _default: ({ agent, querySerializer, }?: {
    agent?: {
        http: Agent;
        https: Agent;
    };
    querySerializer?: QuerySerializer;
}) => Plugin;
/**
 * Makes http/https request.
 * Uses `node-fetch` library.
 *
 * requestParams:
 *      httpMethod {string} [='get']
 *      url {string}
 *      query {object}
 *      queryNoCache {object} - query which wont be used in generating cache key
 *      headers {object}
 *      type {string} [='form']
 *      payload {object}
 *      attaches {array}
 *      timeout {number}
 *      credentials {string}
 *      abortPromise {Promise}
 *      signal {AbortSignal}
 *
 * @param {agent} [agent = Agent] set custom http in node js. The browser ignores this parameter.
 * @param {QuerySerializer} querySerializer function that will be used instead of default value to serialize query strings in url
 * @return {{init: init}}
 */
export default _default;
