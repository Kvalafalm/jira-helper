'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var prop = require('@tinkoff/utils/object/prop');
var AbortController = require('abort-controller');
var propOr = require('@tinkoff/utils/object/propOr');
var requestCore = require('@tinkoff/request-core');
var requestUrlUtils = require('@tinkoff/request-url-utils');
var fetch = require('node-fetch');
var toLower = require('@tinkoff/utils/string/toLower');
var includes = require('@tinkoff/utils/array/includes');
var each = require('@tinkoff/utils/array/each');
var eachObj = require('@tinkoff/utils/object/each');
var isArray = require('@tinkoff/utils/is/array');
var isNil = require('@tinkoff/utils/is/nil');
var FormData = require('form-data');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var prop__default = /*#__PURE__*/_interopDefaultLegacy(prop);
var AbortController__default = /*#__PURE__*/_interopDefaultLegacy(AbortController);
var propOr__default = /*#__PURE__*/_interopDefaultLegacy(propOr);
var fetch__default = /*#__PURE__*/_interopDefaultLegacy(fetch);
var toLower__default = /*#__PURE__*/_interopDefaultLegacy(toLower);
var includes__default = /*#__PURE__*/_interopDefaultLegacy(includes);
var each__default = /*#__PURE__*/_interopDefaultLegacy(each);
var eachObj__default = /*#__PURE__*/_interopDefaultLegacy(eachObj);
var isArray__default = /*#__PURE__*/_interopDefaultLegacy(isArray);
var isNil__default = /*#__PURE__*/_interopDefaultLegacy(isNil);
var FormData__default = /*#__PURE__*/_interopDefaultLegacy(FormData);

const PROTOCOL_HTTP = 'PROTOCOL_HTTP';
const HttpMethods = {
    GET: 'GET',
    POST: 'POST',
    PUT: 'PUT',
    DELETE: 'DELETE',
    HEAD: 'HEAD',
    PATCH: 'PATCH',
};
const REQUEST_TYPES = {
    html: 'text/html',
    json: 'application/json',
    xml: 'text/xml',
    urlencoded: 'application/x-www-form-urlencoded',
    form: 'application/x-www-form-urlencoded',
    'form-data': 'application/x-www-form-urlencoded',
    'multipart/form-data': '',
};

const getSetCookieHeader = (headers) => {
    if (typeof window === 'undefined') {
        return headers.raw()['set-cookie']; // node-fetch specific api, see https://github.com/bitinn/node-fetch#extract-set-cookie-header
    }
    return []; // browser doesn't provide set-cookie header, just return empty array for compatibility
};
// TODO: when some plugins (for example cache) break flow, plugin-http won't be called and meta will be empty
const _getResponse = (request) => {
    const meta = request.getInternalMeta(PROTOCOL_HTTP);
    return meta && meta.response;
};
const _getHeaders = (request) => {
    return prop__default["default"]('headers', _getResponse(request));
};
const getHeaders = (request) => {
    const headers = _getHeaders(request);
    const result = {};
    if (headers) {
        headers.forEach((v, k) => {
            if (k === 'set-cookie') {
                result[k] = getSetCookieHeader(headers);
            }
            else {
                result[k] = v;
            }
        });
    }
    return result;
};
const getHeader = (request, header) => {
    const headers = _getHeaders(request);
    if (headers) {
        if (header === 'set-cookie') {
            return getSetCookieHeader(headers);
        }
        return headers.get(header);
    }
};
const getStatus = (request) => {
    return prop__default["default"]('status', _getResponse(request));
};
const abort = (request) => {
    const meta = request.getInternalMeta(PROTOCOL_HTTP);
    return meta && meta.requestAbort();
};

const isHttpError = (error) => {
    return error.code === 'ERR_HTTP_ERROR';
};
const isTimeoutError = (error) => {
    return error.code === 'ERR_HTTP_REQUEST_TIMEOUT';
};
const isAbortError = (error) => {
    return error.code === 'ABORT_ERR';
};
const isNetworkFail = (error) => {
    return isTimeoutError(error) || (isHttpError(error) && !error.status);
};
const isServerError = (error) => {
    return isHttpError(error) && error.status >= 500;
};

const serialize = (type, payload, querySerializer = requestUrlUtils.serializeQuery) => {
    switch (type) {
        case 'form':
        case 'urlencoded':
        case 'form-data':
            return querySerializer(payload);
        case 'json':
            return JSON.stringify(payload);
        default:
            return payload;
    }
};

var parse = (res) => {
    const type = toLower__default["default"](res.headers.get('content-type') || '');
    if (includes__default["default"]('application/json', type)) {
        return res.json();
    }
    if (includes__default["default"]('application/octet-stream', type)) {
        return res.arrayBuffer();
    }
    return res.text();
};

var createForm = (payload, attaches = []) => {
    const form = new FormData__default["default"]();
    const setField = (value, name) => {
        if (isArray__default["default"](value)) {
            return each__default["default"]((f) => setField(f, name), value);
        }
        if (isNil__default["default"](value)) {
            return;
        }
        form.append(name, value);
    };
    eachObj__default["default"](setField, payload);
    attaches.forEach((file) => {
        if (!(file instanceof window.Blob)) {
            return;
        }
        const fileUploadName = file.uploadName || file.name;
        const fileFieldName = file.fieldName || 'file';
        form.append(fileFieldName, file, encodeURIComponent(fileUploadName));
    });
    return form;
};

class TimeoutError extends Error {
    constructor() {
        super(...arguments);
        this.code = 'ERR_HTTP_REQUEST_TIMEOUT';
        this.message = 'Request timed out';
    }
}
class AbortError extends Error {
    constructor() {
        super(...arguments);
        this.code = 'ABORT_ERR';
    }
}

const isBrowser = typeof window !== 'undefined';
/**
 * Makes http/https request.
 * Uses `node-fetch` library.
 *
 * requestParams:
 *      httpMethod {string} [='get']
 *      url {string}
 *      query {object}
 *      queryNoCache {object} - query which wont be used in generating cache key
 *      headers {object}
 *      type {string} [='form']
 *      payload {object}
 *      attaches {array}
 *      timeout {number}
 *      credentials {string}
 *      abortPromise {Promise}
 *      signal {AbortSignal}
 *
 * @param {agent} [agent = Agent] set custom http in node js. The browser ignores this parameter.
 * @param {QuerySerializer} querySerializer function that will be used instead of default value to serialize query strings in url
 * @return {{init: init}}
 */
var http = ({ agent, querySerializer, } = {}) => {
    let customAgent;
    if (!isBrowser && agent) {
        customAgent = (parsedUrl) => {
            if (parsedUrl.protocol === 'http:') {
                return agent.http;
            }
            return agent.https;
        };
    }
    return {
        init: (context, next) => {
            const { httpMethod = HttpMethods.GET, url, query, queryNoCache, headers, type = 'form', payload, attaches = [], timeout, credentials, withCredentials, abortPromise, responseType, signal: argSignal, } = context.getRequest();
            let ended = false;
            // should be uppercased by spec
            // https://fetch.spec.whatwg.org/#concept-method-normalize
            const method = httpMethod.toUpperCase();
            const noBody = method === HttpMethods.GET || method === HttpMethods.HEAD;
            let body;
            let formHeaders;
            if (attaches.length) {
                body = createForm(payload, isBrowser ? attaches : []);
                formHeaders = body.getHeaders && body.getHeaders();
            }
            else {
                const contentType = propOr__default["default"](type, type, REQUEST_TYPES);
                formHeaders = contentType ? { 'Content-type': contentType } : {};
                if (!noBody) {
                    body = serialize(type, payload, querySerializer);
                }
            }
            let timer;
            let signal;
            if (AbortController__default["default"]) {
                const controller = new AbortController__default["default"]();
                signal = controller.signal;
                const abort = (abortOptions) => {
                    if (ended) {
                        return;
                    }
                    ended = true;
                    controller.abort();
                    next({
                        status: requestCore.Status.ERROR,
                        error: abortOptions instanceof Error
                            ? abortOptions
                            : Object.assign(new AbortError(), {
                                abortOptions: abortOptions || {},
                            }),
                    });
                };
                if (abortPromise) {
                    abortPromise.then(abort);
                }
                if (timeout) {
                    timer = setTimeout(() => {
                        abort(new TimeoutError());
                    }, timeout);
                }
                context.updateInternalMeta(PROTOCOL_HTTP, {
                    requestAbort: abort,
                });
                if (argSignal) {
                    if (argSignal.aborted) {
                        abort();
                    }
                    else {
                        argSignal.addEventListener('abort', () => {
                            abort();
                        });
                    }
                }
            }
            else {
                if (timeout) {
                    timer = setTimeout(() => {
                        next({
                            status: requestCore.Status.ERROR,
                            error: new TimeoutError(),
                        });
                        ended = true;
                    }, timeout);
                }
            }
            let response;
            let responseBody;
            fetch__default["default"](requestUrlUtils.addQuery(requestUrlUtils.normalizeUrl(url), {
                ...(noBody ? payload : {}),
                ...queryNoCache,
                ...query,
            }, querySerializer), {
                signal,
                method,
                headers: { ...formHeaders, ...headers },
                agent: customAgent,
                credentials: credentials !== null && credentials !== void 0 ? credentials : (withCredentials ? 'include' : 'same-origin'),
                body,
                timeout,
            })
                .then((resp) => {
                response = resp;
                context.updateInternalMeta(PROTOCOL_HTTP, {
                    response,
                });
                if (response[responseType]) {
                    return response[responseType]();
                }
                if (!response.ok) {
                    throw new Error(response.statusText);
                }
                return parse(response);
            })
                .then((body) => {
                if (ended) {
                    return;
                }
                responseBody = body;
                next({
                    status: requestCore.Status.COMPLETE,
                    response: responseBody,
                });
            })
                .catch((err) => {
                if (ended) {
                    return;
                }
                if (err && typeof err.type === 'string' && /timeout/.test(err.type)) {
                    return next({
                        status: requestCore.Status.ERROR,
                        error: new TimeoutError(),
                    });
                }
                next({
                    status: requestCore.Status.ERROR,
                    error: Object.assign(err, {
                        code: 'ERR_HTTP_ERROR',
                        status: response && response.status,
                        body: responseBody,
                    }),
                    response: responseBody,
                });
            })
                .then(() => {
                ended = true;
                timer && clearTimeout(timer);
            });
        },
    };
};

exports.HttpMethods = HttpMethods;
exports._getResponse = _getResponse;
exports.abort = abort;
exports["default"] = http;
exports.getHeader = getHeader;
exports.getHeaders = getHeaders;
exports.getStatus = getStatus;
exports.isAbortError = isAbortError;
exports.isHttpError = isHttpError;
exports.isNetworkFail = isNetworkFail;
exports.isServerError = isServerError;
exports.isTimeoutError = isTimeoutError;
